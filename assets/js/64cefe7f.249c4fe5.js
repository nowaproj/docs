"use strict";(self.webpackChunknowa_docs=self.webpackChunknowa_docs||[]).push([[6141],{3719:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/contraints-bg-70f7a3749f86d5ca3070e765200ed33d.png"},4385:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ui/layout/constrains","title":"Constraints","description":"Learn how to control the relative position and resizing behavior of widgets.","source":"@site/docs/ui/layout/constrains.md","sourceDirName":"ui/layout","slug":"/ui/layout/constrains","permalink":"/ui/layout/constrains","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Constraints","description":"Learn how to control the relative position and resizing behavior of widgets."},"sidebar":"tutorialSidebar","previous":{"title":"Intro to Layout","permalink":"/ui/layout/intro-layout"},"next":{"title":"Groups","permalink":"/ui/layout/groups"}}');var i=n(4848),o=n(8453);const r={sidebar_position:2,title:"Constraints",description:"Learn how to control the relative position and resizing behavior of widgets."},a=void 0,c={},l=[{value:"Horizontal Constraints",id:"horizontal-constraints",level:3},{value:"Vertical Constraints",id:"vertical-constraints",level:3},{value:"Center Constraint",id:"center-constraint",level:3}];function h(e){const t={admonition:"admonition",br:"br",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Constraints define how widgets respond when the screen size changes.",(0,i.jsx)(t.br,{}),"\n","They ensure your layout stays consistent across different devices and orientations \u2014 whether it's a phone, tablet, or desktop screen."]}),"\n",(0,i.jsxs)(t.p,{children:["You can apply constraints on both the ",(0,i.jsx)(t.strong,{children:"horizontal"})," and ",(0,i.jsx)(t.strong,{children:"vertical"})," axes to control alignment and resizing behavior."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(3719).A+"",width:"10932",height:"2052"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"horizontal-constraints",children:"Horizontal Constraints"}),"\n",(0,i.jsx)(t.p,{children:"Horizontal constraints determine how a widget behaves along the X-axis."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Left"})," \u2014 Keeps the widget fixed relative to the ",(0,i.jsx)(t.strong,{children:"left"})," side of the screen."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Right"})," \u2014 Keeps the widget fixed relative to the ",(0,i.jsx)(t.strong,{children:"right"})," side of the screen."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Left and Right"})," \u2014 Anchors the widget to both sides, causing it to ",(0,i.jsx)(t.strong,{children:"resize horizontally"})," as the screen width changes."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"vertical-constraints",children:"Vertical Constraints"}),"\n",(0,i.jsx)(t.p,{children:"Vertical constraints determine how a widget behaves along the Y-axis."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Top"})," \u2014 Keeps the widget fixed relative to the ",(0,i.jsx)(t.strong,{children:"top"})," of the screen."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Bottom"})," \u2014 Keeps the widget fixed relative to the ",(0,i.jsx)(t.strong,{children:"bottom"})," of the screen."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Top and Bottom"})," \u2014 Anchors the widget to both sides, causing it to ",(0,i.jsx)(t.strong,{children:"resize vertically"})," as the screen height changes."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"center-constraint",children:"Center Constraint"}),"\n",(0,i.jsxs)(t.p,{children:["Setting constraints to ",(0,i.jsx)(t.strong,{children:"Center"})," keeps your widget positioned relative to the ",(0,i.jsx)(t.strong,{children:"center"})," of the screen.",(0,i.jsx)(t.br,{}),"\n","This is especially useful for elements that should stay perfectly centered, such as dialogs, icons, or logos."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(9843).A+"",width:"1178",height:"692"})}),"\n",(0,i.jsx)(t.admonition,{title:"Pro Tip",type:"tip",children:(0,i.jsxs)(t.p,{children:["If your layout looks off when resizing, double-check your constraints.",(0,i.jsx)(t.br,{}),"\n","Mixing conflicting constraints (like \u201cLeft and Right\u201d with \u201cCenter\u201d) can cause unpredictable behavior."]})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}},9843:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/constraints-a84de17e1b4ffc89a6acd30f24b17efe.gif"}}]);