"use strict";(self.webpackChunknowa_docs=self.webpackChunknowa_docs||[]).push([[4547],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),h=n,g=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return a?r.createElement(g,i(i({ref:t},p),{},{components:a})):r.createElement(g,i({ref:t},p))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},3835:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:1,title:"HTTP GET request"},i="HTTP GET request",l={unversionedId:"data/get_request",id:"data/get_request",title:"HTTP GET request",description:"In this section, you will learn:",source:"@site/docs/data/get_request.md",sourceDirName:"data",slug:"/data/get_request",permalink:"/data/get_request",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"HTTP GET request"},sidebar:"tutorialSidebar",previous:{title:"Data \ud83d\udcc2",permalink:"/data"},next:{title:"Variables \ud83c\udf9b\ufe0f",permalink:"/variables"}},s={},c=[{value:"Creating a GET Request",id:"creating-a-get-request",level:2},{value:"Example: GET Request to Load News from Airtable",id:"example-get-request-to-load-news-from-airtable",level:3},{value:"Connecting the GET Request to the UI",id:"connecting-the-get-request-to-the-ui",level:2},{value:"Example: Wrapping a Row Group with Data Builder",id:"example-wrapping-a-row-group-with-data-builder",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...o}=e;return(0,n.kt)(d,(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"http-get-request"},"HTTP GET request"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"In this section, you will learn:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"1. How to create HTTP GET request \n2. How to connect the API to your UI using the Data Builder widget\n")),(0,n.kt)("p",null,"Nowa provides multiple options to connect your data source, and one of the most popular methods is the traditional HTTP API request. In this guide, we'll show you how to create HTTP GET requests and connect them to your UI, all without writing a single line of code or building any logic with Circuit."),(0,n.kt)("h2",{id:"creating-a-get-request"},"Creating a GET Request"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Click on the ",(0,n.kt)("strong",{parentName:"li"},"Data Sources")," icon in the bottom left corner and choose ",(0,n.kt)("strong",{parentName:"li"},"API"),"."),(0,n.kt)("li",{parentName:"ol"},"Click ",(0,n.kt)("strong",{parentName:"li"},"Add")," to create a new request, then a popup will appear."),(0,n.kt)("li",{parentName:"ol"},"Select the request type (GET, POST, etc.) and enter the API URL."),(0,n.kt)("li",{parentName:"ol"},"Click ",(0,n.kt)("strong",{parentName:"li"},"Go")," in the Test section to test the API and see the received data. Nowa will automatically generate the schema based on the test results and create new objects to arrange the data.")),(0,n.kt)("h3",{id:"example-get-request-to-load-news-from-airtable"},"Example: GET Request to Load News from Airtable"),(0,n.kt)("p",null,'Notice the schema generated by Nowa. It creates a top-level object called "myAPIObj1" (your request name + Obj) that holds the top-level JSON object containing all data received from the request. Nowa also creates objects for unnamed JSON objects, such as ',(0,n.kt)("strong",{parentName:"p"},"myAPIObj_records1"),", which represents each JSON object in the ",(0,n.kt)("strong",{parentName:"p"},"records")," list, with each object representing a single news item."),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(3203).Z,width:"2864",height:"1682"})),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"connecting-the-get-request-to-the-ui"},"Connecting the GET Request to the UI"),(0,n.kt)("p",null,"To connect the request to the UI, we use a wrapper called ",(0,n.kt)("strong",{parentName:"p"},"Data Builder"),". This wrapper manages the entire connection with the API, firing the request when the widget loads on the screen and passing the received data to all child widgets. While loading the data, it displays a customizable loading indicator."),(0,n.kt)("h3",{id:"example-wrapping-a-row-group-with-data-builder"},"Example: Wrapping a Row Group with Data Builder"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Wrap the group")," (row) that will display the news ",(0,n.kt)("strong",{parentName:"li"},"with a Data Builder widget.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Choose the name of the API request")," in the ",(0,n.kt)("strong",{parentName:"li"},"Source")," field."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Choose a loading indicator widget")," to display while the data is being loaded."),(0,n.kt)("li",{parentName:"ol"},"Click the brush icon next to the loading widget to modify it, for example, adding an Align wrapper to center-align the loading indicator.")),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(3460).Z,width:"2864",height:"1682"})),(0,n.kt)("p",null,"Any widget underneath the Data Builder wrapper, starting from the group in that example and any widget under it, can access the object ",(0,n.kt)("strong",{parentName:"p"},'"myAPIObj1"')," which represents the data loaded from the request. Inside that object, there's a variable called ",(0,n.kt)("strong",{parentName:"p"},"records")," that holds the list of news. To learn how to display the list in the UI, check out ",(0,n.kt)("a",{parentName:"p",href:"/variables/lists"},"Creating and Displaying Lists"),"."))}u.isMDXComponent=!0},3460:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/add_data_builder-7ab1ab93ad77db553c7f42389705398b.gif"},3203:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/add_get_request-17bbcedb708e14766f713141c632c51f.gif"}}]);