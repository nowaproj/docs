"use strict";(self.webpackChunknowa_docs=self.webpackChunknowa_docs||[]).push([[5366],{6284:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=t(5893),n=t(1151);const s={sidebar_position:5,title:"Visibility",description:"Control the visibility for a widget"},o=void 0,l={id:"ui/wrappers/visibility",title:"Visibility",description:"Control the visibility for a widget",source:"@site/docs/ui/wrappers/visibility.md",sourceDirName:"ui/wrappers",slug:"/ui/wrappers/visibility",permalink:"/ui/wrappers/visibility",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Visibility",description:"Control the visibility for a widget"},sidebar:"tutorialSidebar",previous:{title:"Text Direction",permalink:"/ui/wrappers/text_direction"},next:{title:"Components",permalink:"/ui/components"}},a={},d=[{value:"Properties:",id:"properties",level:3}];function c(e){const i={code:"code",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.strong,{children:"Visibility wrapper"})," is a powerful and versatile tool that allows developers to control the visibility of a widget in their application. This wrapper provides a straightforward way to show or hide widgets based on certain conditions, enhancing the dynamic nature of your app's UI."]}),"\n",(0,r.jsx)(i.p,{children:"Use the Visibility wrapper when you need to conditionally display or hide widgets in your Flutter application. It is particularly useful for:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Toggling UI elements based on user interactions or state changes."}),"\n",(0,r.jsx)(i.li,{children:"Managing layout complexity by showing only relevant parts of the interface."}),"\n",(0,r.jsx)(i.li,{children:"Optimizing performance by removing off-screen widgets from the widget tree."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"properties",children:"Properties:"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Visible"}),": Determines if the wrapped widget should be displayed. When set to ",(0,r.jsx)(i.code,{children:"true"}),", the widget is rendered and visible to the user. If set to ",(0,r.jsx)(i.code,{children:"false"}),", the widget is removed from the layout, effectively hiding it from view."]}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Replacement"}),": allows you to specify an alternative widget to display when the ",(0,r.jsx)(i.code,{children:"visible"})," property is set to ",(0,r.jsx)(i.code,{children:"false"}),". You can customize this property to show a placeholder, a loading indicator, or any other widget you prefer."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:t(4074).Z+"",width:"1398",height:"928"})})]})}function p(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},4074:(e,i,t)=>{t.d(i,{Z:()=>r});const r=t.p+"assets/images/visibility-108342f61d6e103c634d2b6ae619e88c.gif"},1151:(e,i,t)=>{t.d(i,{Z:()=>l,a:()=>o});var r=t(7294);const n={},s=r.createContext(n);function o(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);